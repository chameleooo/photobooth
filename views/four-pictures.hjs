<div class="first-col">
    <button id="prevEff" class="btn"> Précédent</button>
</div>

<div class="preview-column">

    <div class="preview">
        <canvas id="picture"/>
    </div>

</div>

<div class="last-col">
    <button id="nextEff" class="btn"> Suivant</button>
    <br/>
    <button id="reset" class="btn"> Reset</button>
</div>

<script type="text/javascript">
    var id = {{id}};

    var effects = ["vintage", "lomo", "clarity", "sinCity", "sunrise", "crossProcess", "orangePeel", "love", "grungy", "jarques", "pinhole", "oldBoot", "glowingSun", "hazyDays", "herMajesty", "nostalgia", "hemingway", "concentrate",];

    var cyclicIterator = function (array) {
        var index = 0;
        var copy = array.slice(0);

        return {
            getCurrent: function () {
                return copy[index];
            },

            getNext: function () {
                index = ++index % copy.length;
                return this.getCurrent();
            },

            getPrevious: function () {
                if (--index < 0) {
                    index += copy.length;
                }
                return this.getCurrent();
            }
        };
    };

    $(function () {
        var pictureCounter = 1;

        function takePicture(callback) {
            $.ajax({
                type: 'POST',
                url: "/four-pictures/take-picture",
                data: {
                    counter: pictureCounter,
                    id: id
                }
            }).success(function (data) {
                var canvas = $("#picture")[0];
                var img = new Image();   // Crée un nouvel objet Image
                img.src = data.picture; // Définit le chemin vers sa source
                img.onload = function () {
                    canvas.width = 1036;
                    canvas.height = 1036/1.5;
                    canvas.getContext("2d").drawImage(img, 0, 0, 1036, 1036/1.5)
                    caman = Caman("#picture");
                    listenCaman();
                }
            });
        }

        setTimeout(takePicture, 2000);

        $("#prevEff").on("click", previousEffect);
        $("#nextEff").on("click", nextEffect);
        $("#reset").on("click", resetEffect);

        var iterator = cyclicIterator(effects);

        var caman;

        function resetEffect() {
            caman.reset();
        };

        function previousEffect() {
            applyEffet(iterator.getPrevious());
        }

        function nextEffect() {
            applyEffet(iterator.getNext());
        }

        function startProcessing() {
            $("button").attr("disabled", "disabled");
            $("#processing").show();

        }

        function stopProcessing() {
            $("button").removeAttr("disabled");
            $("#processing").hide();
        }

        var effectTimeout;

        function applyEffet(effect) {
            startProcessing();

            caman.reset();
            caman[effect]().render();
        }

        function listenCaman() {
            Caman.Event.listen("renderFinished", function (job) {
                stopProcessing();
            });
        }

    })

</script>

